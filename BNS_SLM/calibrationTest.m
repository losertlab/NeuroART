%% Calibration

disp('Date your calibration (YYYYMMDD)');
CfileDate=input('Date your calibration (YYYYMMDD): ','s');
CfileName=[CfileDate,'_CamSLMCalib'];
disp('Where do you want the SLM metadata saved?');
Path=uigetdir('.\calibration');
calibrationFilePath=[Path, filesep,CfileName];
            
disp('Select the point pattern seen by the Camera')
[file1,path1]=uigetfile(Path,'*.tif');% point pattern seen by the camera
disp('Select the SLM Theoretical point pattern')
[file2,path2]=uigetfile(Path, '*.tif');% the Pattern used to calculate the hologram Target intensity pattern for the Gerchburg Saxton algorithm
cameraPointPatternImg = [path1,file1];% intensity pattern generated by the hologram that generates 4 asymmetric points
fakePointPatternImg = [path2,file2]; % the Pattern used to calculate the hologram Target intensity pattern for the Gerchburg Saxton algorithm
            
cameraToSlm= register(cameraPointPatternImg, fakePointPatternImg); %this is actually SLM to camera
% cameraToSlm= register(fakePointPatternImg,cameraPointPatternImg); 

verify_Cam2SLM(cameraToSlm,cameraPointPatternImg,fakePointPatternImg);
trafos = struct;
trafos.cameraToSlm = cameraToSlm;
save(calibrationFilePath, 'trafos');    

%% Select targets


disp('Select the calibration file')
            [CfileName,Path] = uigetfile('.\calibration', '*.mat');
            calibrationFilePath=[Path, CfileName];
            
            disp('Select Image to target neurons from')
            [file3,path3]=uigetfile([Path,'*.tif']);% Camera image to select neurons from
            CamTargetImg =[path3,file3]; %  Camera image to select neurons from
            
            %exprmnt_name = input('Input a name for your experiment: ','s');
            
            calFile = load(calibrationFilePath);
            cameraToSlm = calFile.trafos.cameraToSlm;
            
            disp('Select neurons to target from the image. Double click on the last cell')
            [P_DHOT, ~] = select_neurons_from_cam(CamTargetImg, cameraToSlm);
            numPoints = length(P_DHOT);
            data = horzcat(P_DHOT*1000, zeros(numPoints,1));